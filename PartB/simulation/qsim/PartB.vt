// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/03/2018 10:40:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PartB
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PartB_vlg_sample_tst(
	CLOCK,
	START/STOP,
	sampler_tx
);
input  CLOCK;
input  START/STOP;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or START/STOP)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PartB_vlg_check_tst (
	C,
	MAR,
	MDI,
	MDO,
	sampler_rx
);
input [15:0] C;
input [3:0] MAR;
input [7:0] MDI;
input [7:0] MDO;
input sampler_rx;

reg [15:0] C_expected;
reg [3:0] MAR_expected;
reg [7:0] MDI_expected;
reg [7:0] MDO_expected;

reg [15:0] C_prev;
reg [3:0] MAR_prev;
reg [7:0] MDI_prev;
reg [7:0] MDO_prev;

reg [3:0] MAR_expected_prev;
reg [7:0] MDI_expected_prev;
reg [7:0] MDO_expected_prev;

reg [3:0] last_MAR_exp;
reg [7:0] last_MDI_exp;
reg [7:0] last_MDO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	MAR_prev = MAR;
	MDI_prev = MDI;
	MDO_prev = MDO;
end

// update expected /o prevs

always @(trigger)
begin
	MAR_expected_prev = MAR_expected;
	MDI_expected_prev = MDI_expected;
	MDO_expected_prev = MDO_expected;
end


// expected MAR[ 3 ]
initial
begin
	MAR_expected[3] = 1'bX;
	MAR_expected[3] = #999000 1'b0;
end 
// expected MAR[ 2 ]
initial
begin
	MAR_expected[2] = 1'bX;
	MAR_expected[2] = #999000 1'b0;
end 
// expected MAR[ 1 ]
initial
begin
	MAR_expected[1] = 1'bX;
	MAR_expected[1] = #999000 1'b0;
end 
// expected MAR[ 0 ]
initial
begin
	MAR_expected[0] = 1'bX;
	MAR_expected[0] = #999000 1'b0;
end 
// expected MDO[ 7 ]
initial
begin
	MDO_expected[7] = 1'bX;
	MDO_expected[7] = #999000 1'b0;
end 
// expected MDO[ 6 ]
initial
begin
	MDO_expected[6] = 1'bX;
	MDO_expected[6] = #999000 1'b0;
end 
// expected MDO[ 5 ]
initial
begin
	MDO_expected[5] = 1'bX;
	MDO_expected[5] = #999000 1'b0;
end 
// expected MDO[ 4 ]
initial
begin
	MDO_expected[4] = 1'bX;
	MDO_expected[4] = #999000 1'b0;
end 
// expected MDO[ 3 ]
initial
begin
	MDO_expected[3] = 1'bX;
	MDO_expected[3] = #999000 1'b0;
end 
// expected MDO[ 2 ]
initial
begin
	MDO_expected[2] = 1'bX;
	MDO_expected[2] = #999000 1'b0;
end 
// expected MDO[ 1 ]
initial
begin
	MDO_expected[1] = 1'bX;
	MDO_expected[1] = #999000 1'b0;
end 
// expected MDO[ 0 ]
initial
begin
	MDO_expected[0] = 1'bX;
	MDO_expected[0] = #999000 1'b0;
end 
// expected MDI[ 7 ]
initial
begin
	MDI_expected[7] = 1'bX;
	MDI_expected[7] = #999000 1'b0;
end 
// expected MDI[ 6 ]
initial
begin
	MDI_expected[6] = 1'bX;
	MDI_expected[6] = #999000 1'b0;
end 
// expected MDI[ 5 ]
initial
begin
	MDI_expected[5] = 1'bX;
	MDI_expected[5] = #999000 1'b0;
end 
// expected MDI[ 4 ]
initial
begin
	MDI_expected[4] = 1'bX;
	MDI_expected[4] = #999000 1'b0;
end 
// expected MDI[ 3 ]
initial
begin
	MDI_expected[3] = 1'bX;
	MDI_expected[3] = #999000 1'b0;
end 
// expected MDI[ 2 ]
initial
begin
	MDI_expected[2] = 1'bX;
	MDI_expected[2] = #999000 1'b0;
end 
// expected MDI[ 1 ]
initial
begin
	MDI_expected[1] = 1'bX;
	MDI_expected[1] = #999000 1'b0;
end 
// expected MDI[ 0 ]
initial
begin
	MDI_expected[0] = 1'bX;
	MDI_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(C_expected or C or MAR_expected or MAR or MDI_expected or MDI or MDO_expected or MDO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected MAR = %b | expected MDI = %b | expected MDO = %b | ",C_expected_prev,MAR_expected_prev,MDI_expected_prev,MDO_expected_prev);
	$display("| real C = %b | real MAR = %b | real MDI = %b | real MDO = %b | ",C_prev,MAR_prev,MDI_prev,MDO_prev);
`endif
	if (
		( MAR_expected_prev[0] !== 1'bx ) && ( MAR_prev[0] !== MAR_expected_prev[0] )
		&& ((MAR_expected_prev[0] !== last_MAR_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_exp[0] = MAR_expected_prev[0];
	end
	if (
		( MAR_expected_prev[1] !== 1'bx ) && ( MAR_prev[1] !== MAR_expected_prev[1] )
		&& ((MAR_expected_prev[1] !== last_MAR_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_exp[1] = MAR_expected_prev[1];
	end
	if (
		( MAR_expected_prev[2] !== 1'bx ) && ( MAR_prev[2] !== MAR_expected_prev[2] )
		&& ((MAR_expected_prev[2] !== last_MAR_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_exp[2] = MAR_expected_prev[2];
	end
	if (
		( MAR_expected_prev[3] !== 1'bx ) && ( MAR_prev[3] !== MAR_expected_prev[3] )
		&& ((MAR_expected_prev[3] !== last_MAR_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_expected_prev);
		$display ("     Real value = %b", MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MAR_exp[3] = MAR_expected_prev[3];
	end
	if (
		( MDI_expected_prev[0] !== 1'bx ) && ( MDI_prev[0] !== MDI_expected_prev[0] )
		&& ((MDI_expected_prev[0] !== last_MDI_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDI[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDI_expected_prev);
		$display ("     Real value = %b", MDI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MDI_exp[0] = MDI_expected_prev[0];
	end
	if (
		( MDI_expected_prev[1] !== 1'bx ) && ( MDI_prev[1] !== MDI_expected_prev[1] )
		&& ((MDI_expected_prev[1] !== last_MDI_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDI[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDI_expected_prev);
		$display ("     Real value = %b", MDI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MDI_exp[1] = MDI_expected_prev[1];
	end
	if (
		( MDI_expected_prev[2] !== 1'bx ) && ( MDI_prev[2] !== MDI_expected_prev[2] )
		&& ((MDI_expected_prev[2] !== last_MDI_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDI[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDI_expected_prev);
		$display ("     Real value = %b", MDI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MDI_exp[2] = MDI_expected_prev[2];
	end
	if (
		( MDI_expected_prev[3] !== 1'bx ) && ( MDI_prev[3] !== MDI_expected_prev[3] )
		&& ((MDI_expected_prev[3] !== last_MDI_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDI[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDI_expected_prev);
		$display ("     Real value = %b", MDI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MDI_exp[3] = MDI_expected_prev[3];
	end
	if (
		( MDI_expected_prev[4] !== 1'bx ) && ( MDI_prev[4] !== MDI_expected_prev[4] )
		&& ((MDI_expected_prev[4] !== last_MDI_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDI[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDI_expected_prev);
		$display ("     Real value = %b", MDI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MDI_exp[4] = MDI_expected_prev[4];
	end
	if (
		( MDI_expected_prev[5] !== 1'bx ) && ( MDI_prev[5] !== MDI_expected_prev[5] )
		&& ((MDI_expected_prev[5] !== last_MDI_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDI[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDI_expected_prev);
		$display ("     Real value = %b", MDI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MDI_exp[5] = MDI_expected_prev[5];
	end
	if (
		( MDI_expected_prev[6] !== 1'bx ) && ( MDI_prev[6] !== MDI_expected_prev[6] )
		&& ((MDI_expected_prev[6] !== last_MDI_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDI[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDI_expected_prev);
		$display ("     Real value = %b", MDI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MDI_exp[6] = MDI_expected_prev[6];
	end
	if (
		( MDI_expected_prev[7] !== 1'bx ) && ( MDI_prev[7] !== MDI_expected_prev[7] )
		&& ((MDI_expected_prev[7] !== last_MDI_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDI[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDI_expected_prev);
		$display ("     Real value = %b", MDI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MDI_exp[7] = MDI_expected_prev[7];
	end
	if (
		( MDO_expected_prev[0] !== 1'bx ) && ( MDO_prev[0] !== MDO_expected_prev[0] )
		&& ((MDO_expected_prev[0] !== last_MDO_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDO_expected_prev);
		$display ("     Real value = %b", MDO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MDO_exp[0] = MDO_expected_prev[0];
	end
	if (
		( MDO_expected_prev[1] !== 1'bx ) && ( MDO_prev[1] !== MDO_expected_prev[1] )
		&& ((MDO_expected_prev[1] !== last_MDO_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDO_expected_prev);
		$display ("     Real value = %b", MDO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MDO_exp[1] = MDO_expected_prev[1];
	end
	if (
		( MDO_expected_prev[2] !== 1'bx ) && ( MDO_prev[2] !== MDO_expected_prev[2] )
		&& ((MDO_expected_prev[2] !== last_MDO_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDO_expected_prev);
		$display ("     Real value = %b", MDO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MDO_exp[2] = MDO_expected_prev[2];
	end
	if (
		( MDO_expected_prev[3] !== 1'bx ) && ( MDO_prev[3] !== MDO_expected_prev[3] )
		&& ((MDO_expected_prev[3] !== last_MDO_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDO_expected_prev);
		$display ("     Real value = %b", MDO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MDO_exp[3] = MDO_expected_prev[3];
	end
	if (
		( MDO_expected_prev[4] !== 1'bx ) && ( MDO_prev[4] !== MDO_expected_prev[4] )
		&& ((MDO_expected_prev[4] !== last_MDO_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDO_expected_prev);
		$display ("     Real value = %b", MDO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MDO_exp[4] = MDO_expected_prev[4];
	end
	if (
		( MDO_expected_prev[5] !== 1'bx ) && ( MDO_prev[5] !== MDO_expected_prev[5] )
		&& ((MDO_expected_prev[5] !== last_MDO_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDO_expected_prev);
		$display ("     Real value = %b", MDO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MDO_exp[5] = MDO_expected_prev[5];
	end
	if (
		( MDO_expected_prev[6] !== 1'bx ) && ( MDO_prev[6] !== MDO_expected_prev[6] )
		&& ((MDO_expected_prev[6] !== last_MDO_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDO_expected_prev);
		$display ("     Real value = %b", MDO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MDO_exp[6] = MDO_expected_prev[6];
	end
	if (
		( MDO_expected_prev[7] !== 1'bx ) && ( MDO_prev[7] !== MDO_expected_prev[7] )
		&& ((MDO_expected_prev[7] !== last_MDO_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDO_expected_prev);
		$display ("     Real value = %b", MDO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MDO_exp[7] = MDO_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#4000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PartB_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg START/STOP;
// wires                                               
wire [15:0] C;
wire [3:0] MAR;
wire [7:0] MDI;
wire [7:0] MDO;

wire sampler;                             

// assign statements (if any)                          
PartB i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.CLOCK(CLOCK),
	.MAR(MAR),
	.MDI(MDI),
	.MDO(MDO),
	.\START/STOP (START/STOP)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #20000 1'b1;
	#20000;
end 

// START/STOP
initial
begin
	START/STOP = 1'b1;
end 

PartB_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.START/STOP(START/STOP),
	.sampler_tx(sampler)
);

PartB_vlg_check_tst tb_out(
	.C(C),
	.MAR(MAR),
	.MDI(MDI),
	.MDO(MDO),
	.sampler_rx(sampler)
);
endmodule

