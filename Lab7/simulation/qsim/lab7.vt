// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/30/2018 14:45:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab7
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab7_vlg_sample_tst(
	Enter,
	Reset/Lock,
	X,
	sampler_tx
);
input  Enter;
input  Reset/Lock;
input  X;
output sampler_tx;

reg sample;
time current_time;
always @(Enter or Reset/Lock or X)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab7_vlg_check_tst (
	NQ0,
	NQ1,
	NQ2,
	Open,
	Q0,
	Q1,
	Q2,
	sampler_rx
);
input  NQ0;
input  NQ1;
input  NQ2;
input  Open;
input  Q0;
input  Q1;
input  Q2;
input sampler_rx;

reg  NQ0_expected;
reg  NQ1_expected;
reg  NQ2_expected;
reg  Open_expected;
reg  Q0_expected;
reg  Q1_expected;
reg  Q2_expected;

reg  NQ0_prev;
reg  NQ1_prev;
reg  NQ2_prev;
reg  Open_prev;
reg  Q0_prev;
reg  Q1_prev;
reg  Q2_prev;

reg  NQ0_expected_prev;
reg  NQ1_expected_prev;
reg  NQ2_expected_prev;
reg  Open_expected_prev;
reg  Q0_expected_prev;
reg  Q1_expected_prev;
reg  Q2_expected_prev;

reg  last_NQ0_exp;
reg  last_NQ1_exp;
reg  last_NQ2_exp;
reg  last_Open_exp;
reg  last_Q0_exp;
reg  last_Q1_exp;
reg  last_Q2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	NQ0_prev = NQ0;
	NQ1_prev = NQ1;
	NQ2_prev = NQ2;
	Open_prev = Open;
	Q0_prev = Q0;
	Q1_prev = Q1;
	Q2_prev = Q2;
end

// update expected /o prevs

always @(trigger)
begin
	NQ0_expected_prev = NQ0_expected;
	NQ1_expected_prev = NQ1_expected;
	NQ2_expected_prev = NQ2_expected;
	Open_expected_prev = Open_expected;
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	Q2_expected_prev = Q2_expected;
end



// expected NQ0
initial
begin
	NQ0_expected = 1'bX;
end 

// expected NQ1
initial
begin
	NQ1_expected = 1'bX;
end 

// expected NQ2
initial
begin
	NQ2_expected = 1'bX;
end 

// expected Open
initial
begin
	Open_expected = 1'bX;
end 

// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 

// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected Q2
initial
begin
	Q2_expected = 1'bX;
end 
// generate trigger
always @(NQ0_expected or NQ0 or NQ1_expected or NQ1 or NQ2_expected or NQ2 or Open_expected or Open or Q0_expected or Q0 or Q1_expected or Q1 or Q2_expected or Q2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected NQ0 = %b | expected NQ1 = %b | expected NQ2 = %b | expected Open = %b | expected Q0 = %b | expected Q1 = %b | expected Q2 = %b | ",NQ0_expected_prev,NQ1_expected_prev,NQ2_expected_prev,Open_expected_prev,Q0_expected_prev,Q1_expected_prev,Q2_expected_prev);
	$display("| real NQ0 = %b | real NQ1 = %b | real NQ2 = %b | real Open = %b | real Q0 = %b | real Q1 = %b | real Q2 = %b | ",NQ0_prev,NQ1_prev,NQ2_prev,Open_prev,Q0_prev,Q1_prev,Q2_prev);
`endif
	if (
		( NQ0_expected_prev !== 1'bx ) && ( NQ0_prev !== NQ0_expected_prev )
		&& ((NQ0_expected_prev !== last_NQ0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NQ0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NQ0_expected_prev);
		$display ("     Real value = %b", NQ0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_NQ0_exp = NQ0_expected_prev;
	end
	if (
		( NQ1_expected_prev !== 1'bx ) && ( NQ1_prev !== NQ1_expected_prev )
		&& ((NQ1_expected_prev !== last_NQ1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NQ1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NQ1_expected_prev);
		$display ("     Real value = %b", NQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_NQ1_exp = NQ1_expected_prev;
	end
	if (
		( NQ2_expected_prev !== 1'bx ) && ( NQ2_prev !== NQ2_expected_prev )
		&& ((NQ2_expected_prev !== last_NQ2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port NQ2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", NQ2_expected_prev);
		$display ("     Real value = %b", NQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_NQ2_exp = NQ2_expected_prev;
	end
	if (
		( Open_expected_prev !== 1'bx ) && ( Open_prev !== Open_expected_prev )
		&& ((Open_expected_prev !== last_Open_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Open :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Open_expected_prev);
		$display ("     Real value = %b", Open_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Open_exp = Open_expected_prev;
	end
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( Q2_expected_prev !== 1'bx ) && ( Q2_prev !== Q2_expected_prev )
		&& ((Q2_expected_prev !== last_Q2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_expected_prev);
		$display ("     Real value = %b", Q2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q2_exp = Q2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab7_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Enter;
reg Reset/Lock;
reg X;
// wires                                               
wire NQ0;
wire NQ1;
wire NQ2;
wire Open;
wire Q0;
wire Q1;
wire Q2;

wire sampler;                             

// assign statements (if any)                          
lab7 i1 (
// port map - connection between master ports and signals/registers   
	.Enter(Enter),
	.NQ0(NQ0),
	.NQ1(NQ1),
	.NQ2(NQ2),
	.Open(Open),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.\Reset/Lock (Reset/Lock),
	.X(X)
);

// Enter
initial
begin
	Enter = 1'b1;
	Enter = #40000 1'b0;
	Enter = #40000 1'b1;
	Enter = #40000 1'b0;
	Enter = #60000 1'b1;
	Enter = #40000 1'b0;
end 

// Reset/Lock
initial
begin
	Reset/Lock = 1'b0;
end 

// X
initial
begin
	X = 1'b1;
	X = #60000 1'b0;
	X = #100000 1'b1;
	X = #100000 1'b0;
end 

lab7_vlg_sample_tst tb_sample (
	.Enter(Enter),
	.Reset/Lock(Reset/Lock),
	.X(X),
	.sampler_tx(sampler)
);

lab7_vlg_check_tst tb_out(
	.NQ0(NQ0),
	.NQ1(NQ1),
	.NQ2(NQ2),
	.Open(Open),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.sampler_rx(sampler)
);
endmodule

